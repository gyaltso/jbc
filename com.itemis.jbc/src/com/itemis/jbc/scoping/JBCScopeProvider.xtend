/*
 * generated by Xtext 2.11.0
 */
package com.itemis.jbc.scoping

import com.google.inject.Inject
import com.itemis.jbc.jbc.Code
import com.itemis.jbc.jbc.CodeTable
import com.itemis.jbc.jbc.CodeTableEntry
import com.itemis.jbc.jbc.GOTO
import com.itemis.jbc.jbc.GOTO_W
import com.itemis.jbc.jbc.IFEQ
import com.itemis.jbc.jbc.IFGE
import com.itemis.jbc.jbc.IFGT
import com.itemis.jbc.jbc.IFLE
import com.itemis.jbc.jbc.IFLT
import com.itemis.jbc.jbc.IFNE
import com.itemis.jbc.jbc.IFNONNULL
import com.itemis.jbc.jbc.IFNULL
import com.itemis.jbc.jbc.IF_ACMPEQ
import com.itemis.jbc.jbc.IF_ACMPNE
import com.itemis.jbc.jbc.IF_ICMPEQ
import com.itemis.jbc.jbc.IF_ICMPGE
import com.itemis.jbc.jbc.IF_ICMPGT
import com.itemis.jbc.jbc.IF_ICMPLE
import com.itemis.jbc.jbc.IF_ICMPLT
import com.itemis.jbc.jbc.IF_ICMPNE
import com.itemis.jbc.jbc.JSR
import com.itemis.jbc.jbc.JSR_W
import com.itemis.jbc.jbc.JbcPackage
import com.itemis.jbc.jbc.LDC
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractScope

import static extension com.itemis.jbc.binary.ClassFileAccessAPI.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class JBCScopeProvider extends AbstractJBCScopeProvider {

	@Inject IQualifiedNameProvider nameProvider

	// TODO the way the aliasing is done is not performant ... investigate a faster way ... caching does not work well
	override getScope(EObject context, EReference reference) {
		if (JbcPackage.eINSTANCE.constantPoolEntry.isSuperTypeOf(reference.EReferenceType)) {
			if (context instanceof LDC) {
				return new AbstractScope(IScope.NULLSCOPE, false) {
					override protected getAllLocalElements() {
						context.classFile.constantPool.cpInfo.filter[index <= 0xFF].map [
							EObjectDescription.create(nameProvider.getFullyQualifiedName(it), it)
						]
					}

					override protected getLocalElementsByName(QualifiedName name) {
						super.getLocalElementsByName(QualifiedName.create("00" + name.toString))
					}
				}
			}
			return new AbstractScope(IScope.NULLSCOPE, false) {
				override protected getAllLocalElements() {
					context.classFile.constantPool.cpInfo.map [
						EObjectDescription.create(nameProvider.getFullyQualifiedName(it), it)
					]
				}
			};
		} else if (JbcPackage.eINSTANCE.codeTableEntry.isSuperTypeOf(reference.EReferenceType)) {
			// TODO redundant case, implement independent model
			if (context instanceof GOTO || context instanceof GOTO_W || context instanceof IF_ACMPEQ ||
				context instanceof IF_ACMPNE || context instanceof IF_ICMPEQ || context instanceof IF_ICMPNE ||
				context instanceof IF_ICMPLT || context instanceof IF_ICMPGE || context instanceof IF_ICMPGT ||
				context instanceof IF_ICMPLE || context instanceof IFEQ || context instanceof IFNE ||
				context instanceof IFLT || context instanceof IFGE || context instanceof IFGT ||
				context instanceof IFLE || context instanceof IFNONNULL || context instanceof IFNULL ||
				context instanceof JSR || context instanceof JSR_W) {
				return new AbstractScope(IScope.NULLSCOPE, false) {
					override protected getAllLocalElements() {
						(context as CodeTableEntry).table.instruction.map [
							EObjectDescription.create(nameProvider.getFullyQualifiedName(it), it)
						]
					}

					override protected getLocalElementsByName(QualifiedName name) {
						val gotoOffset = (context as CodeTableEntry).offset
						var relativeOffset = Integer.parseInt(name.toString, 16)
						if (relativeOffset > Short.MAX_VALUE)
							relativeOffset = - relativeOffset + Short.MAX_VALUE
						super.getLocalElementsByName(QualifiedName.create((gotoOffset + relativeOffset).u2Value))
					}
				}
			} else if (context instanceof CodeTable) {
				return new AbstractScope(IScope.NULLSCOPE, false) {
					override protected getAllLocalElements() {
						context.instruction.map [
							EObjectDescription.create(nameProvider.getFullyQualifiedName(it), it)
						]
					}
				}
			} else if (context instanceof Code) {
				return getScope(context.codeTable, reference)
			}
		}
		return getScope(context.eContainer, reference)
	}

}
