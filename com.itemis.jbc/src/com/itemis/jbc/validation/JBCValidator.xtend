/*
 * generated by Xtext 2.11.0
 */
package com.itemis.jbc.validation

import com.itemis.jbc.binary.Opcode
import com.itemis.jbc.jbc.AttributeInfo
import com.itemis.jbc.jbc.ClassFile
import com.itemis.jbc.jbc.Code
import com.itemis.jbc.jbc.CodeTableEntry
import com.itemis.jbc.jbc.ConstantPoolEntry
import com.itemis.jbc.jbc.FieldInfo
import com.itemis.jbc.jbc.MethodInfo
import com.itemis.jbc.jbc.U1
import com.itemis.jbc.jbc.U2
import com.itemis.jbc.jbc.U4
import org.eclipse.xtext.validation.Check

import static extension com.itemis.jbc.binary.ClassFileAccessAPI.*
import com.itemis.jbc.jbc.LineNumberTable
import com.itemis.jbc.jbc.LocalVariableTable

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class JBCValidator extends AbstractJBCValidator {

	public static final String EXPECTED_VALUE = "expectedValue";

	// TODO add test cases for all validations
	@Check def classFileAttributes(ClassFile classFile) {
		expect(classFile.magic, -889275714) // CAFEBABE
		expect(classFile.constantPoolCount, classFile.constantPool.cpSize)
		expect(classFile.interfaceCount, classFile.interfaces.interfaceInfo.length)
		expect(classFile.methodsCount, classFile.methods.methodsInfo.length)
		expect(classFile.fieldsCount, classFile.fields.fieldInfo.length)
		expect(classFile.attributesCount, classFile.attributes.attributeInfo.length)
	}

	@Check def constantPoolEntryAttributes(ConstantPoolEntry entry) {
		expect(entry.tag, entry.constantTagValue)
	}

	@Check def fieldInfoAttributes(FieldInfo fieldInfo) {
		expect(fieldInfo.attributesCount, fieldInfo.attributes.attributeInfo.length)
	}

	@Check def methodInfoAttributes(MethodInfo methodInfo) {
		expect(methodInfo.attributesCount, methodInfo.attributes.attributeInfo.length)
	}

	@Check def attributeInfoAttributes(AttributeInfo attribute) {
		expect(attribute.attributeLength, attribute.byteCount)
	}

	@Check def codeAttributes(Code codeAttribute) {
		expect(codeAttribute.codeLength, codeAttribute.codeTable.byteCount)
		expect(codeAttribute.exceptionTableLength, codeAttribute.exceptionTable.exceptionTableEntry.length)
		expect(codeAttribute.attributesCount, codeAttribute.attributes.attributeInfo.length)
	}

	@Check def codeTableEntryAttributes(CodeTableEntry entry) {
		expect(entry.tag, Opcode.from(entry).code)
	}

	@Check def lineNumberTableAttributes(LineNumberTable table) {
		expect(table.lineNumberTableLength, table.lineNumbers.length)
	}

	@Check def localVariableTableAttributes(LocalVariableTable table) {
		expect(table.localVariableTableLength, table.localVariables.length)
	}

	private def expect(U1 attribute, int expectedValue) {
		if (attribute.intValue != expectedValue)
			error("Expected '" + expectedValue.u1Value + "'", attribute.eContainingFeature, EXPECTED_VALUE, expectedValue.u1Value)
	}

	private def expect(U2 attribute, int expectedValue) {
		if (attribute.intValue != expectedValue)
			error("Expected '" + expectedValue.u2Value + "'", attribute.eContainingFeature, EXPECTED_VALUE, expectedValue.u2Value)
	}

	private def expect(U4 attribute, int expectedValue) {
		if (attribute.intValue != expectedValue)
			error("Expected '" + expectedValue.u4Value + "'", attribute.eContainingFeature, EXPECTED_VALUE, expectedValue.u4Value)
	}

}
